---
import { getLangFromUrl, useTranslations, getCurrentRouteKey } from '@/i18n/utils';
import LocalizedLink from '@/components/common/LocalizedLink.astro';
import LanguageToggle from '@/components/common/LanguageToggle.astro';
import ThemeToggle from '@/components/common/ThemeToggle.astro';

const currentLang = getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);
const currentRoute = getCurrentRouteKey(Astro.url);

// Navigation items configuration
const navItems = [
  { key: 'home', href: 'home', label: t('nav.home') },
  { key: 'about', href: 'about', label: t('nav.about') },
  { key: 'services', href: 'services', label: t('nav.services') },
  { key: 'gallery', href: 'gallery', label: t('nav.gallery') },
  { key: 'contact', href: 'contact', label: t('nav.contact') },
] as const;
---

<nav class="main-navigation" role="navigation" aria-label={t('nav.menu')}>
  <div class="nav-container">
    <!-- Logo/Brand -->
    <div class="nav-brand">
      <LocalizedLink href="home" class="brand-link">
        <span class="brand-text">Anarama</span>
      </LocalizedLink>
    </div>

    <!-- Desktop navigation and toggles -->
    <div class="nav-desktop">
      <!-- Navigation menu -->
      <div class="nav-menu">
        <ul class="nav-list" role="list">
          {navItems.map((item) => (
            <li class="nav-item">
              <LocalizedLink
                href={item.href}
                class="nav-link"
                data-route-key={item.key}
                aria-current={currentRoute === item.key ? 'page' : undefined}
              >
                {item.label}
              </LocalizedLink>
            </li>
          ))}
        </ul>
      </div>

      <!-- Desktop toggles -->
      <div class="nav-toggles">
        <ThemeToggle />
        <LanguageToggle />
      </div>
    </div>

    <!-- Mobile menu button -->
    <button
      type="button"
      class="mobile-menu-button"
      aria-expanded="false"
      aria-controls="mobile-navigation-menu"
      aria-label={t('a11y.menu.toggle')}
    >
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
    </button>

    <!-- Mobile navigation menu -->
    <div class="mobile-nav-menu" id="mobile-navigation-menu">
      <div class="mobile-nav-content">
        <!-- Mobile navigation links -->
        <ul class="mobile-nav-list" role="list">
          {navItems.map((item) => (
            <li class="mobile-nav-item">
              <LocalizedLink
                href={item.href}
                class="mobile-nav-link"
                data-route-key={item.key}
                aria-current={currentRoute === item.key ? 'page' : undefined}
              >
                {item.label}
              </LocalizedLink>
            </li>
          ))}
        </ul>

        <!-- Mobile toggles -->
        <div class="mobile-nav-toggles">
          <div class="mobile-toggle-group">
            <span class="toggle-label">{t('theme.toggle')}</span>
            <ThemeToggle />
          </div>
          <div class="mobile-toggle-group">
            <span class="toggle-label">{t('lang.switch')}</span>
            <LanguageToggle />
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  function initNavigationWithToggles(): void {
    const mobileButton = document.querySelector('.mobile-menu-button');
    const mobileNavMenu = document.querySelector('.mobile-nav-menu');
    const mobileNavLinks = document.querySelectorAll('.mobile-nav-link');

    if (!mobileButton || !mobileNavMenu) return;

    // Toggle mobile menu
    function toggleMobileMenu(): void {
      const isExpanded = mobileButton.getAttribute('aria-expanded') === 'true';
      const newState = !isExpanded;
      
      mobileButton.setAttribute('aria-expanded', newState.toString());
      mobileNavMenu.classList.toggle('active', newState);
      document.body.classList.toggle('nav-open', newState);
      
      // Focus management
      if (newState) {
        const firstLink = mobileNavMenu.querySelector('.mobile-nav-link');
        if (firstLink instanceof HTMLElement) {
          firstLink.focus();
        }
      }
    }

    // Close mobile menu
    function closeMobileMenu(): void {
      mobileButton.setAttribute('aria-expanded', 'false');
      mobileNavMenu.classList.remove('active');
      document.body.classList.remove('nav-open');
    }

    // Event listeners
    mobileButton.addEventListener('click', toggleMobileMenu);

    // Close menu when clicking nav links
    mobileNavLinks.forEach((link) => {
      link.addEventListener('click', closeMobileMenu);
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      const target = event.target as Element;
      if (!target.closest('.main-navigation')) {
        closeMobileMenu();
      }
    });

    // Close menu on escape key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        closeMobileMenu();
        mobileButton.focus();
      }
    });

    // Handle window resize
    window.addEventListener('resize', () => {
      if (window.innerWidth >= 768) {
        closeMobileMenu();
      }
    });
  }

  // Initialize on DOM load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initNavigationWithToggles);
  } else {
    initNavigationWithToggles();
  }

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', initNavigationWithToggles);
</script>

<style>
  .main-navigation {
    position: sticky;
    top: 0;
    z-index: 1000;
    background: var(--bg-primary);
    border-bottom: 1px solid var(--color-primary);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .nav-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
    height: 4rem;
  }

  /* Brand/Logo */
  .nav-brand {
    flex-shrink: 0;
  }

  .brand-link {
    text-decoration: none;
    color: var(--color-primary);
    font-weight: 700;
    font-size: 1.5rem;
    transition: color 0.2s ease;
  }

  .brand-link:hover {
    color: var(--color-secondary);
  }

  /* Desktop navigation */
  .nav-desktop {
    display: none;
    align-items: center;
    gap: 2rem;
    flex: 1;
    justify-content: space-between;
    margin-left: 2rem;
  }

  .nav-menu {
    flex: 1;
  }

  .nav-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    gap: 0.5rem;
    justify-content: center;
  }

  .nav-item {
    margin: 0;
  }

  .nav-link {
    display: block;
    padding: 0.5rem 1rem;
    color: var(--text-primary);
    text-decoration: none;
    font-weight: 500;
    border-radius: 0.375rem;
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
  }

  .nav-link:hover {
    background: var(--bg-secondary);
    border-bottom-color: var(--color-accent);
  }

  .nav-link:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
  }

  .nav-link[aria-current="page"],
  .nav-link.active {
    background: var(--color-primary);
    color: white;
    border-bottom-color: var(--color-accent);
    font-weight: 600;
  }

  /* Desktop toggles */
  .nav-toggles {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-shrink: 0;
  }

  /* Mobile menu button */
  .mobile-menu-button {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 2.5rem;
    height: 2.5rem;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    gap: 0.25rem;
    transition: transform 0.2s ease;
  }

  .mobile-menu-button:hover {
    transform: scale(1.05);
  }

  .mobile-menu-button:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: 2px;
    border-radius: 0.25rem;
  }

  .hamburger-line {
    display: block;
    width: 1.5rem;
    height: 2px;
    background: var(--color-primary);
    transition: all 0.3s ease;
    transform-origin: center;
  }

  /* Hamburger animation */
  .mobile-menu-button[aria-expanded="true"] .hamburger-line:nth-child(1) {
    transform: rotate(45deg) translate(0.375rem, 0.375rem);
  }

  .mobile-menu-button[aria-expanded="true"] .hamburger-line:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-button[aria-expanded="true"] .hamburger-line:nth-child(3) {
    transform: rotate(-45deg) translate(0.375rem, -0.375rem);
  }

  /* Mobile navigation menu */
  .mobile-nav-menu {
    position: fixed;
    top: 4rem;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--bg-primary);
    transform: translateX(-100%);
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    overflow-y: auto;
  }

  .mobile-nav-menu.active {
    transform: translateX(0);
    opacity: 1;
    visibility: visible;
  }

  .mobile-nav-content {
    padding: 2rem 1rem;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    min-height: 100%;
  }

  .mobile-nav-list {
    list-style: none;
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .mobile-nav-item {
    margin: 0;
  }

  .mobile-nav-link {
    display: block;
    padding: 1rem;
    color: var(--text-primary);
    text-decoration: none;
    font-weight: 500;
    font-size: 1.125rem;
    border-radius: 0.5rem;
    border-left: 3px solid transparent;
    transition: all 0.2s ease;
  }

  .mobile-nav-link:hover {
    background: var(--bg-secondary);
    color: var(--color-primary);
    border-left-color: var(--color-accent);
  }

  .mobile-nav-link:focus {
    outline: 2px solid var(--color-accent);
    outline-offset: -2px;
    background: var(--bg-secondary);
  }

  .mobile-nav-link[aria-current="page"],
  .mobile-nav-link.active {
    background: var(--color-primary);
    color: white;
    border-left-color: var(--color-accent);
    font-weight: 600;
  }

  /* Mobile toggles */
  .mobile-nav-toggles {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-primary);
    margin-top: auto;
  }

  .mobile-toggle-group {
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
  }

  .toggle-label {
    font-weight: 500;
    color: var(--text-primary);
  }

  /* Prevent body scroll when mobile menu is open */
  :global(body.nav-open) {
    overflow: hidden;
  }

  /* Desktop styles */
  @media (min-width: 768px) {
    .nav-desktop {
      display: flex;
    }

    .mobile-menu-button {
      display: none;
    }

    .mobile-nav-menu {
      display: none;
    }
  }

  /* Large desktop styles */
  @media (min-width: 1024px) {
    .nav-container {
      padding: 0 2rem;
    }

    .nav-list {
      gap: 1rem;
    }

    .nav-link {
      padding: 0.75rem 1.25rem;
    }

    .nav-toggles {
      gap: 1.5rem;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .main-navigation {
      border-bottom-width: 2px;
    }

    .nav-link,
    .mobile-nav-link {
      border-width: 2px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .mobile-nav-menu,
    .hamburger-line,
    .nav-link,
    .mobile-nav-link,
    .mobile-menu-button {
      transition: none;
    }
  }
</style>