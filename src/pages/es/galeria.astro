---
import Layout from '../../layouts/Layout.astro';
import { useTranslations } from '@/i18n/utils';

const t = useTranslations('es');

// Placeholder images data for prototype
const galleryImages = [
  { id: 1, category: 'performances', alt: 'Espectáculo de títeres en escuela primaria', title: 'Espectáculo Educativo - Valores' },
  { id: 2, category: 'performances', alt: 'Niños interactuando con títeres', title: 'Presentación Interactiva' },
  { id: 3, category: 'workshops', alt: 'Taller de creación de títeres', title: 'Taller de Títeres - Creatividad' },
  { id: 4, category: 'community', alt: 'Evento comunitario con títeres', title: 'Evento Comunitario' },
  { id: 5, category: 'performances', alt: 'Espectáculo sobre medio ambiente', title: 'Cuidado del Medio Ambiente' },
  { id: 6, category: 'workshops', alt: 'Niños creando sus propios títeres', title: 'Taller Creativo' },
  { id: 7, category: 'community', alt: 'Presentación en centro de salud', title: 'Apoyo Hospitalario' },
  { id: 8, category: 'performances', alt: 'Espectáculo sobre diversidad', title: 'Diversidad e Inclusión' },
  { id: 9, category: 'workshops', alt: 'Técnicas de manipulación de títeres', title: 'Técnicas de Títeres' },
  { id: 10, category: 'community', alt: 'Festival comunitario', title: 'Festival de Arte' },
  { id: 11, category: 'performances', alt: 'Espectáculo de seguridad infantil', title: 'Seguridad y Prevención' },
  { id: 12, category: 'workshops', alt: 'Resultado final de taller', title: 'Creaciones Finales' },
];
---

<Layout 
  title={t('gallery.title')}
  description={t('meta.gallery.description')}
>
  <!-- Hero Section -->
  <section class="page-hero">
    <div class="hero-content">
      <h1 class="hero-title">{t('gallery.title')}</h1>
      <p class="hero-subtitle">{t('gallery.subtitle')}</p>
    </div>
  </section>

  <!-- Gallery Filter Section -->
  <section class="gallery-filter-section">
    <div class="section-container">
      <div class="filter-buttons">
        <button class="filter-btn active" data-filter="all">
          Todas las Imágenes
        </button>
        <button class="filter-btn" data-filter="performances">
          {t('gallery.performances')}
        </button>
        <button class="filter-btn" data-filter="workshops">
          {t('gallery.workshops')}
        </button>
        <button class="filter-btn" data-filter="community">
          {t('gallery.community')}
        </button>
      </div>
    </div>
  </section>

  <!-- Gallery Grid Section -->
  <section class="gallery-grid-section">
    <div class="section-container">
      <div class="gallery-grid" id="gallery-grid">
        {galleryImages.map((image) => (
          <div class="gallery-item" data-category={image.category}>
            <div class="image-placeholder">
              <div class="placeholder-icon">🎭</div>
              <div class="placeholder-text">{image.title}</div>
            </div>
            <div class="image-overlay">
              <h4 class="image-title">{image.title}</h4>
              <button class="view-btn" data-image-id={image.id}>
                Ver Imagen
              </button>
            </div>
          </div>
        ))}
      </div>
      
      <!-- Loading State -->
      <div class="loading-state" id="loading-state" style="display: none;">
        <div class="loading-spinner"></div>
        <p>{t('gallery.loading')}</p>
      </div>
    </div>
  </section>

  <!-- Gallery Stats Section -->
  <section class="gallery-stats-section">
    <div class="section-container">
      <div class="stats-grid">
        <div class="stat-card">
          <div class="stat-number">50+</div>
          <div class="stat-label">Espectáculos Documentados</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">25+</div>
          <div class="stat-label">Talleres Realizados</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">15+</div>
          <div class="stat-label">Eventos Comunitarios</div>
        </div>
        <div class="stat-card">
          <div class="stat-number">500+</div>
          <div class="stat-label">Niños Participantes</div>
        </div>
      </div>
    </div>
  </section>

  <!-- Call to Action Section -->
  <section class="gallery-cta-section">
    <div class="section-container">
      <h2>¿Quieres que documentemos tu evento?</h2>
      <p>Cada espectáculo es único y especial. Nos encanta capturar los momentos de alegría y aprendizaje que compartimos con los niños.</p>
      <div class="cta-actions">
        <a href="/es/contacto" class="cta-button primary">Solicitar Espectáculo</a>
        <a href="/es/servicios" class="cta-button secondary">Ver Servicios</a>
      </div>
    </div>
  </section>

  <!-- Image Modal (for future implementation) -->
  <div class="image-modal" id="image-modal" style="display: none;">
    <div class="modal-backdrop"></div>
    <div class="modal-content">
      <button class="modal-close" id="modal-close">&times;</button>
      <div class="modal-image">
        <div class="modal-placeholder">
          <div class="placeholder-icon">🎭</div>
          <div class="placeholder-text">Imagen del Espectáculo</div>
        </div>
      </div>
      <div class="modal-info">
        <h3 class="modal-title">Título del Espectáculo</h3>
        <p class="modal-description">Descripción de la imagen y contexto del evento.</p>
      </div>
    </div>
  </div>
</Layout>

<script>
  function initGallery(): void {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const galleryItems = document.querySelectorAll('.gallery-item');
    const viewButtons = document.querySelectorAll('.view-btn');
    const modal = document.getElementById('image-modal');
    const modalClose = document.getElementById('modal-close');
    const loadingState = document.getElementById('loading-state');

    // Filter functionality
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        const filter = button.getAttribute('data-filter');
        
        // Update active button
        filterButtons.forEach(btn => btn.classList.remove('active'));
        button.classList.add('active');
        
        // Show loading state
        if (loadingState) {
          loadingState.style.display = 'block';
        }
        
        // Filter items with animation
        setTimeout(() => {
          galleryItems.forEach(item => {
            const category = item.getAttribute('data-category');
            if (filter === 'all' || category === filter) {
              item.style.display = 'block';
              item.style.opacity = '0';
              setTimeout(() => {
                item.style.opacity = '1';
              }, 50);
            } else {
              item.style.opacity = '0';
              setTimeout(() => {
                item.style.display = 'none';
              }, 300);
            }
          });
          
          // Hide loading state
          if (loadingState) {
            loadingState.style.display = 'none';
          }
        }, 500);
      });
    });

    // Modal functionality
    viewButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const imageId = button.getAttribute('data-image-id');
        
        // In a real implementation, you would load the actual image here
        if (modal) {
          modal.style.display = 'flex';
          document.body.style.overflow = 'hidden';
        }
      });
    });

    // Close modal
    if (modalClose && modal) {
      modalClose.addEventListener('click', () => {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
      });
    }

    // Close modal on backdrop click
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          modal.style.display = 'none';
          document.body.style.overflow = 'auto';
        }
      });
    }

    // Close modal on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && modal && modal.style.display === 'flex') {
        modal.style.display = 'none';
        document.body.style.overflow = 'auto';
      }
    });
  }

  // Initialize on DOM load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGallery);
  } else {
    initGallery();
  }

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', initGallery);
</script>

<style>
  @import "../../styles/pages.css";

  /* Gallery-specific styles */
  .gallery-filter-section {
    padding: 2rem 0;
    background: var(--bg-secondary);
  }

  .filter-buttons {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    justify-content: center;
  }

  .filter-btn {
    padding: 0.75rem 1.5rem;
    background: var(--bg-primary);
    border: 2px solid var(--color-primary);
    border-radius: 0.5rem;
    color: var(--color-primary);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .filter-btn:hover,
  .filter-btn.active {
    background: var(--color-primary);
    color: white;
  }

  /* Gallery Grid */
  .gallery-grid-section {
    padding: 4rem 0;
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }

  .gallery-item {
    position: relative;
    aspect-ratio: 4/3;
    border-radius: 1rem;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    cursor: pointer;
  }

  .gallery-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
  }

  .image-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, var(--color-primary) 0%, var(--color-secondary) 100%);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: white;
    text-align: center;
    padding: 2rem;
  }

  .placeholder-icon {
    font-size: 4rem;
    margin-bottom: 1rem;
    opacity: 0.8;
  }

  .placeholder-text {
    font-size: 1.125rem;
    font-weight: 600;
    line-height: 1.4;
  }

  .image-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.8));
    color: white;
    padding: 2rem 1.5rem 1.5rem;
    transform: translateY(100%);
    transition: transform 0.3s ease;
  }

  .gallery-item:hover .image-overlay {
    transform: translateY(0);
  }

  .image-title {
    font-size: 1.125rem;
    margin-bottom: 1rem;
    font-weight: 600;
  }

  .view-btn {
    background: var(--color-accent);
    color: var(--color-primary);
    border: none;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .view-btn:hover {
    background: white;
    transform: translateY(-2px);
  }

  /* Loading State */
  .loading-state {
    text-align: center;
    padding: 3rem;
    color: var(--text-secondary);
  }

  .loading-spinner {
    width: 3rem;
    height: 3rem;
    border: 3px solid var(--bg-secondary);
    border-top: 3px solid var(--color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Gallery Stats */
  .gallery-stats-section {
    padding: 4rem 0;
    background: var(--bg-secondary);
  }

  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 2rem;
  }

  .stat-card {
    background: var(--bg-primary);
    padding: 2rem;
    border-radius: 1rem;
    text-align: center;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }

  .stat-number {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--color-primary);
    margin-bottom: 0.5rem;
  }

  .stat-label {
    color: var(--text-secondary);
    font-weight: 500;
  }

  /* CTA Section */
  .gallery-cta-section {
    padding: 4rem 0;
    background: var(--color-primary);
    color: white;
    text-align: center;
  }

  .gallery-cta-section h2 {
    color: white;
    margin-bottom: 1rem;
  }

  .gallery-cta-section p {
    font-size: 1.125rem;
    opacity: 0.9;
    margin-bottom: 2rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .cta-actions {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    align-items: center;
  }

  /* Image Modal */
  .image-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .modal-backdrop {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
  }

  .modal-content {
    position: relative;
    background: var(--bg-primary);
    border-radius: 1rem;
    max-width: 800px;
    max-height: 90vh;
    overflow: hidden;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
  }

  .modal-close {
    position: absolute;
    top: 1rem;
    right: 1rem;
    background: rgba(0, 0, 0, 0.5);
    color: white;
    border: none;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    font-size: 1.5rem;
    cursor: pointer;
    z-index: 10001;
    transition: background 0.3s ease;
  }

  .modal-close:hover {
    background: rgba(0, 0, 0, 0.7);
  }

  .modal-image {
    aspect-ratio: 4/3;
    background: var(--bg-secondary);
  }

  .modal-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: var(--text-secondary);
  }

  .modal-placeholder .placeholder-icon {
    font-size: 6rem;
    margin-bottom: 1rem;
  }

  .modal-info {
    padding: 2rem;
  }

  .modal-title {
    color: var(--color-primary);
    margin-bottom: 1rem;
    font-size: 1.5rem;
  }

  .modal-description {
    color: var(--text-secondary);
    line-height: 1.6;
  }

  /* Tablet styles */
  @media (min-width: 768px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }

    .stats-grid {
      grid-template-columns: repeat(4, 1fr);
    }

    .cta-actions {
      flex-direction: row;
      justify-content: center;
    }
  }

  /* Desktop styles */
  @media (min-width: 1024px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .gallery-item,
    .image-overlay,
    .view-btn,
    .loading-spinner {
      transition: none;
      animation: none;
    }
  }
</style>